// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract Voting {
    address public admin;
    bool public electionEnded;
    mapping(address => bool) public hasVoted;
    mapping(string => uint) public votesReceived;
    string[] public candidates;

    modifier onlyAdmin() {
        require(msg.sender == admin, "Only admin can perform this action.");
        _;
    }

    modifier electionOngoing() {
        require(!electionEnded, "Election has ended.");
        _;
    }

    constructor(string[] memory candidateNames) {
        admin = msg.sender;
        candidates = candidateNames;
        electionEnded = false;
    }

    function addCandidate(string memory name) public onlyAdmin electionOngoing {
        candidates.push(name);
    }

    function vote(string memory candidate) public electionOngoing {
        require(!hasVoted[msg.sender], "You have already voted.");
        require(validCandidate(candidate), "Candidate not valid.");

        votesReceived[candidate] += 1;
        hasVoted[msg.sender] = true;
    }

    function getVotes(string memory candidate) public view returns (uint) {
        require(validCandidate(candidate), "Candidate not valid.");
        return votesReceived[candidate];
    }

    function endElection() public onlyAdmin electionOngoing {
        electionEnded = true;
    }

    function getWinner() public view returns (string memory winner) {
        require(electionEnded, "Election is not yet ended.");
        uint maxVotes = 0;
        string memory currentWinner = "";

        for (uint i = 0; i < candidates.length; i++) {
            if (votesReceived[candidates[i]] > maxVotes) {
                maxVotes = votesReceived[candidates[i]];
                currentWinner = candidates[i];
            }
        }

        return currentWinner;
    }

    function validCandidate(string memory candidate) internal view returns (bool) {
        for (uint i = 0; i < candidates.length; i++) {
            if (keccak256(bytes(candidates[i])) == keccak256(bytes(candidate))) {
                return true;
            }
        }
        return false;
    }

    function getAllCandidates() public view returns (string[] memory) {
        return candidates;
    }
}
